// <auto-generated />
using System;
using DAOs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAOs.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250315073348_minhtri")]
    partial class minhtri
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Accessory", b =>
                {
                    b.Property<long>("AccessoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("accessory_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccessoryId"));

                    b.Property<long>("AccessoryTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("accessory_type_id");

                    b.Property<int>("Karat")
                        .HasColumnType("int")
                        .HasColumnName("karat");

                    b.Property<float>("MaterialWeight")
                        .HasColumnType("real")
                        .HasColumnName("material_weight");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<long>("ShapeId")
                        .HasColumnType("bigint")
                        .HasColumnName("shape_id");

                    b.HasKey("AccessoryId");

                    b.HasIndex("AccessoryTypeId");

                    b.HasIndex("ShapeId");

                    b.ToTable("accessory");
                });

            modelBuilder.Entity("BusinessObjects.Models.AccessoryImage", b =>
                {
                    b.Property<long>("AccessoryImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("image_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccessoryImageId"));

                    b.Property<long>("AccessoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("accessory_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.HasKey("AccessoryImageId");

                    b.HasIndex("AccessoryId");

                    b.ToTable("accessory_image");
                });

            modelBuilder.Entity("BusinessObjects.Models.AccessoryType", b =>
                {
                    b.Property<long>("AccessoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("accessory_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccessoryTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<double>("ProcessingPrice")
                        .HasColumnType("float")
                        .HasColumnName("processing_price");

                    b.HasKey("AccessoryTypeId");

                    b.ToTable("accessory_type");
                });

            modelBuilder.Entity("BusinessObjects.Models.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<long>("RankId")
                        .HasColumnType("bigint")
                        .HasColumnName("rank_id");

                    b.Property<int>("RewardPoint")
                        .HasColumnType("int")
                        .HasColumnName("reward_point");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role");

                    b.HasKey("AccountId");

                    b.HasIndex("RankId");

                    b.ToTable("account");
                });

            modelBuilder.Entity("BusinessObjects.Models.Blog", b =>
                {
                    b.Property<long>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("blog_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BlogId"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit")
                        .HasColumnName("is_hidden");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("BlogId");

                    b.HasIndex("AuthorId");

                    b.ToTable("blog");
                });

            modelBuilder.Entity("BusinessObjects.Models.Diamond", b =>
                {
                    b.Property<long>("DiamondId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("diamond_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DiamondId"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit")
                        .HasColumnName("availability");

                    b.Property<float>("Carat")
                        .HasColumnType("real")
                        .HasColumnName("carat");

                    b.Property<long>("CertificateNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("certificate_number");

                    b.Property<string>("CertificateUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("certificate_url");

                    b.Property<int>("Clarity")
                        .HasColumnType("int")
                        .HasColumnName("clarity");

                    b.Property<int>("Color")
                        .HasColumnType("int")
                        .HasColumnName("color");

                    b.Property<string>("Cut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cut");

                    b.Property<string>("Fluorescence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fluorescence");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<string>("Lab")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lab");

                    b.Property<string>("Polish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("polish");

                    b.Property<long>("ShapeId")
                        .HasColumnType("bigint")
                        .HasColumnName("shape_id");

                    b.Property<string>("Symmetry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("symmetry");

                    b.HasKey("DiamondId");

                    b.HasIndex("ShapeId");

                    b.ToTable("diamond");
                });

            modelBuilder.Entity("BusinessObjects.Models.DiamondPrice", b =>
                {
                    b.Property<long>("DiamondPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("diamond_price_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DiamondPriceId"));

                    b.Property<string>("Clarity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("clarity");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("color");

                    b.Property<DateTime>("EffTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("eff_time");

                    b.Property<float>("MaxCaratEff")
                        .HasColumnType("real")
                        .HasColumnName("max_carat_eff");

                    b.Property<float>("MinCaratEff")
                        .HasColumnType("real")
                        .HasColumnName("min_carat_eff");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unit_price");

                    b.HasKey("DiamondPriceId");

                    b.ToTable("diamond_price");
                });

            modelBuilder.Entity("BusinessObjects.Models.Feedback", b =>
                {
                    b.Property<long>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("feedback_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FeedbackId"));

                    b.Property<long?>("AccessoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("accessory_id");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<long?>("OrderDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_detail_id");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccessoryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDetailId")
                        .IsUnique()
                        .HasFilter("[order_detail_id] IS NOT NULL");

                    b.ToTable("feedback");
                });

            modelBuilder.Entity("BusinessObjects.Models.MaterialPrice", b =>
                {
                    b.Property<long>("MaterialPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("material_price_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MaterialPriceId"));

                    b.Property<DateTime>("EffTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("eff_time");

                    b.Property<int>("Karat")
                        .HasColumnType("int")
                        .HasColumnName("karat");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unit_price");

                    b.HasKey("MaterialPriceId");

                    b.ToTable("material_price");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<long?>("DeliveryStaffId")
                        .HasColumnType("bigint")
                        .HasColumnName("delivery_staff_id");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("order_status");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<long>("PriceRateId")
                        .HasColumnType("bigint")
                        .HasColumnName("price_rate_id");

                    b.Property<long?>("PromotionId")
                        .HasColumnType("bigint")
                        .HasColumnName("promotion_id");

                    b.Property<long>("RankId")
                        .HasColumnType("bigint")
                        .HasColumnName("rank_id");

                    b.Property<long?>("SaleStaffId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_staff_id");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shipping_address");

                    b.Property<float>("TotalDiscountPercent")
                        .HasColumnType("real")
                        .HasColumnName("total_discount_percent");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float")
                        .HasColumnName("total_price");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryStaffId");

                    b.HasIndex("PriceRateId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("RankId");

                    b.HasIndex("SaleStaffId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetail", b =>
                {
                    b.Property<long>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("order_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderDetailId"));

                    b.Property<long?>("AccessoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("accessory_id");

                    b.Property<long?>("DiamondId")
                        .HasColumnType("bigint")
                        .HasColumnName("diamond_id");

                    b.Property<long>("DiamondPriceId")
                        .HasColumnType("bigint")
                        .HasColumnName("diamond_price_id");

                    b.Property<long?>("FeedbackId")
                        .HasColumnType("bigint")
                        .HasColumnName("feedback_id");

                    b.Property<double?>("ItemPrice")
                        .HasColumnType("float")
                        .HasColumnName("item_price");

                    b.Property<long?>("MaterialPriceId")
                        .HasColumnType("bigint")
                        .HasColumnName("material_price_id");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("order_id");

                    b.Property<float?>("Size")
                        .HasColumnType("real")
                        .HasColumnName("size");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("AccessoryId");

                    b.HasIndex("DiamondId");

                    b.HasIndex("DiamondPriceId");

                    b.HasIndex("MaterialPriceId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_detail");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.Merchant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdateAt");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastUpdatedBy");

                    b.Property<string>("MerchantIpnUrl")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("MerchentIpnUrl");

                    b.Property<string>("MerchantName")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("MerchantName");

                    b.Property<string>("MerchantReturnUrl")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("MerchantReturnUrl");

                    b.Property<string>("MerchantWebLink")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("MerchantWebLink");

                    b.Property<string>("SecretKey")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SecretKey");

                    b.HasKey("Id");

                    b.ToTable("merchant");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.Payment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpireDate");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("MerchantId");

                    b.Property<string>("PaidAmount")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PaidAmount");

                    b.Property<string>("PaymentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PaymentContent");

                    b.Property<string>("PaymentCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PaymentCurrency");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("PaymentDate");

                    b.Property<string>("PaymentDestinationId")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PaymentDestinationId");

                    b.Property<string>("PaymentLanguage")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PaymentLanguage");

                    b.Property<string>("PaymentLastMessage")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PaymentLastMessage");

                    b.Property<string>("PaymentRefId")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PaymentRefId");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PaymentStatus");

                    b.Property<decimal?>("RequiredAmount")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("RequiredAmount");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("PaymentDestinationId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.PaymentDestination", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("DesLogo")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DesLogo");

                    b.Property<string>("DesName")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DesName");

                    b.Property<string>("DesParentId")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DesParentId");

                    b.Property<string>("DesShortName")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DesShortName");

                    b.Property<int?>("DesSortIndex")
                        .HasColumnType("int")
                        .HasColumnName("DesSortIndex");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("LastUpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdateAt");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastUpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("DesParentId");

                    b.ToTable("payment_destination");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.PaymentNotification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Id");

                    b.Property<decimal>("NotiAmount")
                        .HasColumnType("decimal(19,2)")
                        .HasColumnName("NotiAmount");

                    b.Property<string>("NotiContent")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NotiContent");

                    b.Property<DateTime?>("NotiDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NotiDate");

                    b.Property<string>("NotiMerchantId")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NotiMerchantId");

                    b.Property<string>("NotiMessage")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NotiMessage");

                    b.Property<string>("NotiPaymentId")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NotiPaymentId");

                    b.Property<DateTime?>("NotiResDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("NotiResDate");

                    b.Property<string>("NotiResHttpCode")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NotiResHttpCode");

                    b.Property<string>("NotiResMessage")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NotiResMessage");

                    b.Property<string>("NotiSignature")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NotiSignature");

                    b.Property<string>("NotiStatus")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NotiStatus");

                    b.Property<string>("PaymentRefId")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PaymentRefId");

                    b.HasKey("Id");

                    b.HasIndex("NotiMerchantId");

                    b.HasIndex("NotiPaymentId");

                    b.ToTable("payment_notification");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.PaymentSignature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Id");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PaymentId");

                    b.Property<string>("SignAlgo")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SignAlgo");

                    b.Property<DateTime?>("SignDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SignDate");

                    b.Property<string>("SignOwn")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SignOwn");

                    b.Property<string>("SignValue")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("SignValue");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("payment_signature");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.PaymentTransaction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Id");

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PaymentId");

                    b.Property<decimal?>("TranAmount")
                        .HasColumnType("decimal(19, 2)")
                        .HasColumnName("TranAmount");

                    b.Property<DateTime?>("TranDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("TranDate");

                    b.Property<string>("TranPayload")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TranPayload");

                    b.Property<string>("TranRefId")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("TranRefId");

                    b.Property<string>("TranStatus")
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("TranStatus");

                    b.Property<string>("TransMessage")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("TransMessage");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PaymentId");

                    b.ToTable("payment_transaction");
                });

            modelBuilder.Entity("BusinessObjects.Models.PriceRate", b =>
                {
                    b.Property<long>("PriceRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("price_rate_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PriceRateId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<float>("Percent")
                        .HasColumnType("real")
                        .HasColumnName("percent");

                    b.HasKey("PriceRateId");

                    b.HasIndex("AccountId");

                    b.ToTable("price_rate");
                });

            modelBuilder.Entity("BusinessObjects.Models.Promotion", b =>
                {
                    b.Property<long>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("promotion_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PromotionId"));

                    b.Property<float>("DiscountPercent")
                        .HasColumnType("real")
                        .HasColumnName("discount_percent");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<string>("PromotionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("promotion_code");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("promotion_name");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.HasKey("PromotionId");

                    b.HasIndex("PromotionCode")
                        .IsUnique();

                    b.ToTable("promotion");
                });

            modelBuilder.Entity("BusinessObjects.Models.Rank", b =>
                {
                    b.Property<long>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("rank_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RankId"));

                    b.Property<float>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rank_name");

                    b.Property<int>("RewardPoint")
                        .HasColumnType("int")
                        .HasColumnName("reward_point");

                    b.HasKey("RankId");

                    b.ToTable("rank");
                });

            modelBuilder.Entity("BusinessObjects.Models.Shape", b =>
                {
                    b.Property<long>("ShapeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("shape_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ShapeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("ShapeId");

                    b.ToTable("shape");
                });

            modelBuilder.Entity("BusinessObjects.Models.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("transaction_id");

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payment_method");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transaction_status");

                    b.HasKey("TransactionId");

                    b.HasIndex("OrderId");

                    b.ToTable("transaction");
                });

            modelBuilder.Entity("BusinessObjects.Models.WarrantyCard", b =>
                {
                    b.Property<long>("WarrantyCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("warranty_card_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WarrantyCardId"));

                    b.Property<long?>("AccessoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("accessory_id");

                    b.Property<long?>("DiamondId")
                        .HasColumnType("bigint")
                        .HasColumnName("diamond_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<long>("OrderDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_detail_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.HasKey("WarrantyCardId");

                    b.HasIndex("AccessoryId");

                    b.HasIndex("DiamondId");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("warranty_card");
                });

            modelBuilder.Entity("BusinessObjects.Models.WarrantyRequest", b =>
                {
                    b.Property<long>("WarrantyRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("warranty_request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WarrantyRequestId"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<long?>("DeliveryStaffId")
                        .HasColumnType("bigint")
                        .HasColumnName("delivery_staff_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("ReceiveTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("receive_time");

                    b.Property<DateTime?>("ReturnTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("return_time");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shipping_address");

                    b.Property<long>("WarrantyCardId")
                        .HasColumnType("bigint")
                        .HasColumnName("warranty_card_id");

                    b.Property<string>("WarrantyReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("warranty_reason");

                    b.Property<long?>("WarrantyStaffId")
                        .HasColumnType("bigint")
                        .HasColumnName("warranty_staff_id");

                    b.Property<string>("WarrantyStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("warranty_status");

                    b.HasKey("WarrantyRequestId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryStaffId");

                    b.HasIndex("WarrantyCardId");

                    b.HasIndex("WarrantyStaffId");

                    b.ToTable("warranty_request");
                });

            modelBuilder.Entity("BusinessObjects.Models.Accessory", b =>
                {
                    b.HasOne("BusinessObjects.Models.AccessoryType", "AccessoryType")
                        .WithMany("Accessories")
                        .HasForeignKey("AccessoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Shape", "Shape")
                        .WithMany("Accessories")
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessoryType");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("BusinessObjects.Models.AccessoryImage", b =>
                {
                    b.HasOne("BusinessObjects.Models.Accessory", "Accessory")
                        .WithMany("AccessoryImages")
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessory");
                });

            modelBuilder.Entity("BusinessObjects.Models.Account", b =>
                {
                    b.HasOne("BusinessObjects.Models.Rank", "Rank")
                        .WithMany("Accounts")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("BusinessObjects.Models.Blog", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BusinessObjects.Models.Diamond", b =>
                {
                    b.HasOne("BusinessObjects.Models.Shape", "Shape")
                        .WithMany("Diamonds")
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("BusinessObjects.Models.Feedback", b =>
                {
                    b.HasOne("BusinessObjects.Models.Accessory", "Accessory")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccessoryId");

                    b.HasOne("BusinessObjects.Models.Account", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId");

                    b.HasOne("BusinessObjects.Models.OrderDetail", "OrderDetail")
                        .WithOne("Feedback")
                        .HasForeignKey("BusinessObjects.Models.Feedback", "OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Accessory");

                    b.Navigation("Customer");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Customer")
                        .WithMany("OrdersOfCustomer")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Account", "DeliveryStaff")
                        .WithMany("OrdersOfDeliveryStaff")
                        .HasForeignKey("DeliveryStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusinessObjects.Models.PriceRate", "PriceRate")
                        .WithMany("Orders")
                        .HasForeignKey("PriceRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Promotion", "Promotion")
                        .WithMany("Orders")
                        .HasForeignKey("PromotionId");

                    b.HasOne("BusinessObjects.Models.Rank", "Rank")
                        .WithMany("Orders")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Account", "SaleStaff")
                        .WithMany("OrdersOfSaleStaff")
                        .HasForeignKey("SaleStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("DeliveryStaff");

                    b.Navigation("PriceRate");

                    b.Navigation("Promotion");

                    b.Navigation("Rank");

                    b.Navigation("SaleStaff");
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetail", b =>
                {
                    b.HasOne("BusinessObjects.Models.Accessory", "Accessory")
                        .WithMany("OrderDetails")
                        .HasForeignKey("AccessoryId");

                    b.HasOne("BusinessObjects.Models.Diamond", "Diamond")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DiamondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusinessObjects.Models.DiamondPrice", "DiamondPrice")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DiamondPriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.MaterialPrice", "MaterialPrice")
                        .WithMany("OrderDetails")
                        .HasForeignKey("MaterialPriceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.Navigation("Accessory");

                    b.Navigation("Diamond");

                    b.Navigation("DiamondPrice");

                    b.Navigation("MaterialPrice");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.Payment", b =>
                {
                    b.HasOne("BusinessObjects.Models.Payment.Domain.Entities.Merchant", "Merchant")
                        .WithMany("Payments")
                        .HasForeignKey("MerchantId");

                    b.HasOne("BusinessObjects.Models.Payment.Domain.Entities.PaymentDestination", "PaymentDestination")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentDestinationId");

                    b.Navigation("Merchant");

                    b.Navigation("PaymentDestination");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.PaymentDestination", b =>
                {
                    b.HasOne("BusinessObjects.Models.Payment.Domain.Entities.PaymentDestination", "DesParent")
                        .WithMany("PaymentDestinations")
                        .HasForeignKey("DesParentId");

                    b.Navigation("DesParent");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.PaymentNotification", b =>
                {
                    b.HasOne("BusinessObjects.Models.Payment.Domain.Entities.Merchant", "NotiMerchant")
                        .WithMany("Notifications")
                        .HasForeignKey("NotiMerchantId");

                    b.HasOne("BusinessObjects.Models.Payment.Domain.Entities.Payment", "NotiPayment")
                        .WithMany("Notifications")
                        .HasForeignKey("NotiPaymentId");

                    b.Navigation("NotiMerchant");

                    b.Navigation("NotiPayment");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.PaymentSignature", b =>
                {
                    b.HasOne("BusinessObjects.Models.Payment.Domain.Entities.Payment", "Payment")
                        .WithMany("Signatures")
                        .HasForeignKey("PaymentId");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.PaymentTransaction", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("BusinessObjects.Models.Payment.Domain.Entities.Payment", "Payment")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentId");

                    b.Navigation("Account");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BusinessObjects.Models.PriceRate", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Account")
                        .WithMany("PriceRates")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObjects.Models.Transaction", b =>
                {
                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObjects.Models.WarrantyCard", b =>
                {
                    b.HasOne("BusinessObjects.Models.Accessory", "Accessory")
                        .WithMany("WarrantyCards")
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BusinessObjects.Models.Diamond", "Diamond")
                        .WithMany("WarrantyCards")
                        .HasForeignKey("DiamondId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObjects.Models.OrderDetail", "OrderDetail")
                        .WithMany("WarrantyCards")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessory");

                    b.Navigation("Diamond");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("BusinessObjects.Models.WarrantyRequest", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Customer")
                        .WithMany("WarrantyRequestsOfCustomer")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Account", "DeliveryStaff")
                        .WithMany("WarrantyRequestsOfDeliveryStaff")
                        .HasForeignKey("DeliveryStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusinessObjects.Models.WarrantyCard", "WarrantyCard")
                        .WithMany("WarrantyRequests")
                        .HasForeignKey("WarrantyCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Account", "WarrantyStaff")
                        .WithMany("WarrantyRequestsOfWarrantyStaff")
                        .HasForeignKey("WarrantyStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("DeliveryStaff");

                    b.Navigation("WarrantyCard");

                    b.Navigation("WarrantyStaff");
                });

            modelBuilder.Entity("BusinessObjects.Models.Accessory", b =>
                {
                    b.Navigation("AccessoryImages");

                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");

                    b.Navigation("WarrantyCards");
                });

            modelBuilder.Entity("BusinessObjects.Models.AccessoryType", b =>
                {
                    b.Navigation("Accessories");
                });

            modelBuilder.Entity("BusinessObjects.Models.Account", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Feedbacks");

                    b.Navigation("OrdersOfCustomer");

                    b.Navigation("OrdersOfDeliveryStaff");

                    b.Navigation("OrdersOfSaleStaff");

                    b.Navigation("PriceRates");

                    b.Navigation("WarrantyRequestsOfCustomer");

                    b.Navigation("WarrantyRequestsOfDeliveryStaff");

                    b.Navigation("WarrantyRequestsOfWarrantyStaff");
                });

            modelBuilder.Entity("BusinessObjects.Models.Diamond", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("WarrantyCards");
                });

            modelBuilder.Entity("BusinessObjects.Models.DiamondPrice", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BusinessObjects.Models.MaterialPrice", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetail", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("WarrantyCards");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.Merchant", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.Payment", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Signatures");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment.Domain.Entities.PaymentDestination", b =>
                {
                    b.Navigation("PaymentDestinations");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BusinessObjects.Models.PriceRate", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObjects.Models.Promotion", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObjects.Models.Rank", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObjects.Models.Shape", b =>
                {
                    b.Navigation("Accessories");

                    b.Navigation("Diamonds");
                });

            modelBuilder.Entity("BusinessObjects.Models.WarrantyCard", b =>
                {
                    b.Navigation("WarrantyRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
